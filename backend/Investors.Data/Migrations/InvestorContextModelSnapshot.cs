// <auto-generated />
using System;
using Investors.Data.Database;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Investors.Data.Migrations
{
    [DbContext(typeof(InvestorContext))]
    partial class InvestorContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.16")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Investors.Data.Domain.AssetClass", b =>
                {
                    b.Property<int>("AssetClassID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("AssetClassID"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("AssetClassID");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("AssetClass", (string)null);
                });

            modelBuilder.Entity("Investors.Data.Domain.Commitment", b =>
                {
                    b.Property<int>("CommitmentID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CommitmentID"));

                    b.Property<decimal>("Amount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int?>("AssetClassID")
                        .HasColumnType("int");

                    b.Property<string>("Currency")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("InvestorID")
                        .HasColumnType("int");

                    b.HasKey("CommitmentID");

                    b.HasIndex("AssetClassID");

                    b.HasIndex("InvestorID");

                    b.ToTable("Commitment", (string)null);
                });

            modelBuilder.Entity("Investors.Data.Domain.Country", b =>
                {
                    b.Property<int>("CountryID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CountryID"));

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("CountryID");

                    b.HasIndex("Name")
                        .IsUnique()
                        .HasFilter("[Name] IS NOT NULL");

                    b.ToTable("Country", (string)null);
                });

            modelBuilder.Entity("Investors.Data.Domain.Investor", b =>
                {
                    b.Property<int>("InvestorID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("InvestorID"));

                    b.Property<int?>("CountryID")
                        .HasColumnType("int");

                    b.Property<DateTime>("DateAdded")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DateUpdated")
                        .HasColumnType("datetime2");

                    b.Property<int?>("InvestorTypeID")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("InvestorID");

                    b.HasIndex("CountryID");

                    b.HasIndex("InvestorTypeID");

                    b.ToTable("Investor", (string)null);
                });

            modelBuilder.Entity("Investors.Data.Domain.InvestorType", b =>
                {
                    b.Property<int>("InvestorTypeID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("InvestorTypeID"));

                    b.Property<string>("TypeOfInvestor")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("InvestorTypeID");

                    b.HasIndex("TypeOfInvestor")
                        .IsUnique()
                        .HasFilter("[TypeOfInvestor] IS NOT NULL");

                    b.ToTable("InvestorType", (string)null);
                });

            modelBuilder.Entity("Investors.Data.Domain.Commitment", b =>
                {
                    b.HasOne("Investors.Data.Domain.AssetClass", "AssetClass")
                        .WithMany()
                        .HasForeignKey("AssetClassID");

                    b.HasOne("Investors.Data.Domain.Investor", "Investor")
                        .WithMany("Commitments")
                        .HasForeignKey("InvestorID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AssetClass");

                    b.Navigation("Investor");
                });

            modelBuilder.Entity("Investors.Data.Domain.Investor", b =>
                {
                    b.HasOne("Investors.Data.Domain.Country", "Country")
                        .WithMany()
                        .HasForeignKey("CountryID");

                    b.HasOne("Investors.Data.Domain.InvestorType", "InvestorType")
                        .WithMany()
                        .HasForeignKey("InvestorTypeID");

                    b.Navigation("Country");

                    b.Navigation("InvestorType");
                });

            modelBuilder.Entity("Investors.Data.Domain.Investor", b =>
                {
                    b.Navigation("Commitments");
                });
#pragma warning restore 612, 618
        }
    }
}
